# -*- coding: utf-8 -*-
"""
Created on Thu Apr 28 12:12:51 2022

@author: beelk
"""

from turtle import color, width
import pandas as pd
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.ensemble import RandomForestClassifier
import numpy as np
from sklearn.naive_bayes import MultinomialNB
import dash
from dash import html
from dash import dcc
from dash.dependencies import Input, Output, State
import dash_bootstrap_components as dbc
nb = MultinomialNB()
app = dash.Dash(external_stylesheets=[dbc.themes.SOLAR])
top = html.H1(id = 'H1', children = 'DJI PREDICTION',\
     style = {'textAlign':'center','color':'#66FCF1', 'font-size':'75px', 'margin':'10px'})
marquee_1 = html.Marquee(id = 'marquee',children = "PLEASE (DON'T) FOLLOW THIS IF YOU WANT MONEY!",\
    style = {'fontWeight':'bold', 'textAlign':'center','height':'100px','font-size':'25px','color':'#66FCF1'})
       

body_app = dbc.Container([
    
    html.Br(),
    
    dbc.Row([
        dbc.Col(html.H2('Enter the headline',style={'font-family': 'cursive','font-size':35,'font-weight':'bold','color': '#66FCF1'}),\
         width = {'size':30, 'offset':2}),
        ]),
    
    dbc.Row([
        dbc.Col(dbc.Textarea(id = 'headline-area', value = '',\
                    style = {'height':'200px','width':'80%','text-align': 'center', 'padding': '30px', 'font-family': 'Tahoma', 'font-size': 35},\
                     placeholder='Write the headline here ....'),width={'size':10, 'offset':2}),
        ]),
    
    html.Br(),

    dbc.Row([
    dbc.Col(dbc.Button(id = 'generate-ans', children = 'UP OR DOWN??', color = 'dark', n_clicks = 0),\
            width = {'size':10, 'offset':2}),
        ]),

    html.Br(),
    html.Br(),        
          
    dbc.Row([
    dbc.Col(
        dcc.Loading(
            id = 'load-ans',
            type = 'circle',
            children = html.Div(id = 'div-answer',style = {'textAlign':'center', 'font-family': 'sans-serif',\
                'font-size':50 ,'color':'yellow'})
            )
        
        ),
    
        ]),    

    html.Br(),
    html.Br(), 
    html.Br(),
    html.Br(),       
    
    
    ], 
    
    fluid = True)
    
new_dash_list = []   
@app.callback(Output('div-answer','children'),
              [Input('generate-ans','n_clicks')],
              [State('headline-area', 'value')])
def get_output(clicks,context):
    new_dash_list = []
    if clicks>0:
        if clicks>0:
            df = pd.read_csv('C:\\Users\\beelk\\Data.csv', encoding = 'ISO-8859-1')

            train = df

            data=train.iloc[:,2:27]

            data.replace("[^a-zA-Z]"," ", inplace=True)

            list1= [i for i in range(25)]
            new_Index=[str(i) for i in list1]
            data.columns= new_Index
            for index in new_Index:
                data[index]=data[index].str.lower()
                
            headlines=[]
            for row in range(0,len(data)):
                headlines.append(' '.join([str(i) for i in data.iloc[row,0:25]]))
            cv=CountVectorizer(ngram_range=(2,2))
            traindata_x=cv.fit_transform(headlines)

            nb.fit(traindata_x,train['Label'])

            
            context_headline = r"""{}""".format(context)
            new_dash_list.append(context_headline)
            test_data_vector = cv.transform(new_dash_list)
            predictions = nb.predict(test_data_vector)
            predictions = np.array2string(predictions)
            up = 'UP'
            down = 'DOWN'
            if predictions == '[1]':
                return down
            else:
                return up
        else:
            return ' '
        


app.layout = html.Div(id = 'parent', children = [top,marquee_1,body_app],style= {'background-image':'url(https://miro.medium.com/max/1400/1*gZPXCm2zS3f_ssvTn3Q45A.jpeg)'})


if __name__ == "__main__":
    app.run_server(debug = False)
